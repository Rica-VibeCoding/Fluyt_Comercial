üü° Refatora√ß√£o

1
estamos integrando a tabela (Setores)  no circuito frontend, backand e supabase 
o c√≥digo de confec√ß√£o esta sendo criado e voc√™ pode entrar no inicio, meio ou fim do processo
seu papel √© refatorar as demandas de implanta√ß√£o, para isso vc precisa se especialista em refatora√ß√£o
a demanda atual √©

2

agora fa√ßa uma  bateria de depura√ß√£o do que foi feito, pense que vc e um s√™nior que ira revisar o servi√ßo da equipe, vc √© conservador, n√£o gosta de remendo e c√≥digos que podem dar problema no futuro.
depois da uma nota para equipe de 1 a 10, vc √© exigente e n√£o deixa de ver nanda do c√≥digo, nem passa pano pra equipe..
temos na equipe o Backend e o Frontend trabalhando separadamente mas em sinergia.. 

3
Identifique padr√µes de c√≥digo duplicados no projeto. Procure por fun√ß√µes, componentes ou blocos de c√≥digo que aparecem em v√°rios lugares com pouca ou nenhuma altera√ß√£o. Sugira refatora√ß√µes para criar componentes reutiliz√°veis, hooks personalizados ou fun√ß√µes utilit√°rias que possam substituir essa duplica√ß√£o, seguindo o princ√≠pio DRY (Don't Repeat Yourself).

4

Analise o projeto e identifique: 1) Componentes que foram criados mas nunca importados ou renderizados, 2) Fun√ß√µes declaradas que nunca s√£o chamadas, 3) Importa√ß√µes que n√£o s√£o utilizadas, 4) Vari√°veis de estado (useState) que nunca mudam ou nunca s√£o lidas, 5) C√≥digo comentado sem explica√ß√£o clara de por que foi mantido. Sugira a remo√ß√£o desses elementos para melhorar a manutenibilidade e performance do c√≥digo.


5
 an√°lise e gerar tarefas e sub-tarefas e criar em um arquivo .md para cada, backend e frontend



7
orienta√ß√£o importante, c√≥digo tem que ser limpo,  
   n√£o permite paliativos, temos que atr√°s de        
   solu√ß√µes alinhados com boas praticas, n√£o crie     
   nada importante sem pedir permiss√£o, esse √© um    
   sistema desenvolvido por empres√°rio  e n√£o um        
   programador, ele tem que carregar simplicidade,   
   efetividade e assegurar que vou conseguir ir at√©   
   o fim, se criar complexidade hard  vamos   
   matar o projeto pois n√£o vou saber resolver nem mesmo com a IA
   quanto mais definitivo, melhor para eu avan√ßar.
