/**
 * TESTE DE DEBUG - SETORES SERVICE
 * =================================
 * 
 * Script para testar se a corre√ß√£o do ApiClientStable funcionou
 */

// Simular o ambiente do React (importa√ß√£o est√°tica)
import { ApiClientStable } from './src/lib/api-client-stable.js';

// Teste 1: Verificar se m√©todos est√°ticos existem
console.log('üîç Testando m√©todos est√°ticos do ApiClientStable...');

const metodosEstaticos = ['get', 'post', 'put', 'delete', 'request'];
const metodosExistentes = metodosEstaticos.filter(metodo => 
  typeof ApiClientStable[metodo] === 'function'
);

console.log(`‚úÖ M√©todos encontrados: ${metodosExistentes.join(', ')}`);

if (metodosExistentes.length === metodosEstaticos.length) {
  console.log('‚úÖ Todos os m√©todos est√°ticos est√£o dispon√≠veis!');
} else {
  console.log('‚ùå Alguns m√©todos est√°ticos est√£o faltando');
}

// Teste 2: Tentar usar o m√©todo get (mesmo que falhe por conex√£o)
console.log('\nüîç Testando chamada de m√©todo est√°tico...');

try {
  // Chamar o m√©todo - pode falhar por n√£o ter backend, mas n√£o deve falhar por "n√£o ser fun√ß√£o"
  ApiClientStable.get('/test')
    .then(response => {
      console.log('‚úÖ M√©todo get funcionou (resposta recebida)');
    })
    .catch(error => {
      if (error.message.includes('is not a function')) {
        console.log('‚ùå ERRO: M√©todo ainda n√£o √© fun√ß√£o');
      } else {
        console.log('‚úÖ M√©todo get existe e foi chamado (erro de conex√£o √© normal)');
        console.log(`   Erro esperado: ${error.message}`);
      }
    });
} catch (error) {
  if (error.message.includes('is not a function')) {
    console.log('‚ùå ERRO: M√©todo get n√£o √© uma fun√ß√£o');
  } else {
    console.log('‚úÖ M√©todo get existe (erro diferente)');
  }
}

// Resultado esperado
console.log('\nüìã RESULTADO ESPERADO:');
console.log('‚úÖ M√©todos est√°ticos dispon√≠veis');
console.log('‚úÖ Chamada n√£o falha com "is not a function"');
console.log('‚ö†Ô∏è Pode falhar com erro de conex√£o (normal sem backend)'); 