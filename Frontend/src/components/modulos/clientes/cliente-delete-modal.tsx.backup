import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '../../ui/dialog';
import { Button } from '../../ui/button';
import { Input } from '../../ui/input';
import { Label } from '../../ui/label';
import { Alert, AlertDescription } from '../../ui/alert';
import { Loader2, AlertTriangle, Home, Package, Receipt } from 'lucide-react';
import { Cliente } from '../../../types/cliente';

interface ClienteDeleteModalProps {
  aberto: boolean;
  onFechar: () => void;
  cliente: Cliente | null;
  onConfirmar: (clienteId: string) => Promise<boolean>;
  isLoading: boolean;
}

interface DadosRelacionados {
  ambientes: number;
  orcamentos: number;
  materiais: number;
}

export function ClienteDeleteModal({
  aberto,
  onFechar,
  cliente,
  onConfirmar,
  isLoading
}: ClienteDeleteModalProps) {
  const [confirmacao, setConfirmacao] = useState('');
  const [dadosRelacionados, setDadosRelacionados] = useState<DadosRelacionados | null>(null);
  const [carregandoDados, setCarregandoDados] = useState(false);
  const [erro, setErro] = useState<string | null>(null);

  // Ref para verificar se componente ainda est√° montado
  const isMountedRef = React.useRef(true);
  // Ref para controlar requisi√ß√µes em andamento
  const abortControllerRef = React.useRef<AbortController | null>(null);

  // Cleanup ao desmontar
  React.useEffect(() => {
    return () => {
      isMountedRef.current = false;
      // Cancelar requisi√ß√µes em andamento
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
    };
  }, []);

  // Fun√ß√µes seguras de setState que s√≥ executam se componente estiver montado
  const safeSetCarregandoDados = React.useCallback((valor: boolean) => {
    if (isMountedRef.current) {
      setCarregandoDados(valor);
    }
  }, []);

  const safeSetErro = React.useCallback((valor: string | null) => {
    if (isMountedRef.current) {
      setErro(valor);
    }
  }, []);

  const safeSetDadosRelacionados = React.useCallback((valor: DadosRelacionados | null) => {
    if (isMountedRef.current) {
      setDadosRelacionados(valor);
    }
  }, []);

  const safeSetConfirmacao = React.useCallback((valor: string) => {
    if (isMountedRef.current) {
      setConfirmacao(valor);
    }
  }, []);

  // ============= SISTEMA DE DEBUG =============
  const debugLog = (acao: string, dados?: any) => {
    const timestamp = new Date().toLocaleTimeString();
    console.log(`üîç [ClienteDeleteModal] ${timestamp} - ${acao}`, dados ? dados : '');
  };

  // Log de mudan√ßas de estado
  React.useEffect(() => {
    debugLog('Estado atualizado', {
      aberto,
      clienteId: cliente?.id,
      clienteNome: cliente?.nome,
      isLoading,
      carregandoDados,
      temDadosRelacionados: !!dadosRelacionados,
      confirmacao: confirmacao ? '***preenchido***' : 'vazio',
      erro: !!erro
    });
  }, [aberto, cliente, isLoading, carregandoDados, dadosRelacionados, confirmacao, erro]);

  // ============= FUN√á√ÉO DEVE VIR ANTES DO useEffect =============
  const buscarDadosRelacionados = React.useCallback(async () => {
    if (!cliente) {
      debugLog('‚ùå buscarDadosRelacionados: cliente n√£o informado');
      return;
    }
    
    debugLog('üîÑ Iniciando busca de dados relacionados', { clienteId: cliente.id });
    
    // Usar setState direto para evitar depend√™ncias
    if (isMountedRef.current) setCarregandoDados(true);
    if (isMountedRef.current) setErro(null);
    
    try {
      // Cancelar requisi√ß√£o anterior se existir
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
      
      // Criar novo AbortController
      abortControllerRef.current = new AbortController();
      
      // Buscar token de autentica√ß√£o
      const token = localStorage.getItem('fluyt_auth_token');
      debugLog('üîê Token encontrado', { temToken: !!token });
      
      const headers: any = {
        'Content-Type': 'application/json',
      };
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }

      debugLog('üì° Fazendo requisi√ß√£o para API', {
        url: `http://localhost:8000/api/v1/clientes/${cliente.id}/dados-relacionados`,
        temAuthorization: !!headers['Authorization']
      });

      // Tentar buscar dados reais da API
      const response = await fetch(`http://localhost:8000/api/v1/clientes/${cliente.id}/dados-relacionados`, {
        method: 'GET',
        headers,
        signal: abortControllerRef.current.signal
      });

      debugLog('üì° Resposta da API recebida', { 
        status: response.status, 
        ok: response.ok 
      });

      if (response.ok) {
        const data = await response.json();
        debugLog('‚úÖ Dados recebidos da API', data);
        
        const dadosFinais = {
          ambientes: data.ambientes || 0,
          orcamentos: data.orcamentos || 0,
          materiais: data.materiais || 0
        };
        
        if (isMountedRef.current) {
          setDadosRelacionados(dadosFinais);
          setCarregandoDados(false);
        }
        debugLog('‚úÖ Estados atualizados com dados da API', dadosFinais);
        
      } else if (response.status === 403) {
        throw new Error('Sem permiss√£o - Usu√°rio n√£o autenticado');
      } else if (response.status === 401) {
        throw new Error('Token expirado - Fa√ßa login novamente');
      } else {
        throw new Error(`API retornou erro ${response.status}`);
      }
    } catch (error) {
      // Se foi cancelado pelo AbortController, n√£o fazer nada
      if (error instanceof Error && error.name === 'AbortError') {
        debugLog('üö´ Requisi√ß√£o cancelada (componente desmontado)');
        return;
      }
      
      debugLog('‚ùå Erro na busca, usando fallback', { erro: error });
      
      // Fallback: assumir que cliente tem dados (modo cauteloso)
      const dadosFallback = { ambientes: 2, orcamentos: 1, materiais: 8 };
      if (isMountedRef.current) {
        setErro('Sistema offline - assumindo que cliente possui dados importantes');
        setDadosRelacionados(dadosFallback);
        setCarregandoDados(false);
      }
      
      debugLog('‚ö†Ô∏è Fallback aplicado', dadosFallback);
    }
  }, [cliente]); // ‚Üê REMOVIDO AS DEPEND√äNCIAS PROBLEM√ÅTICAS

  // Buscar dados relacionados quando o modal abrir
  useEffect(() => {
    let timeoutId: NodeJS.Timeout;
    
    debugLog('useEffect disparado', { aberto, clienteId: cliente?.id });
    
    if (aberto && cliente) {
      debugLog('Modal aberto - iniciando busca de dados');
      buscarDadosRelacionados();
    } else if (!aberto) {
      debugLog('Modal fechando - limpando estados');
      // Limpar estado ao fechar com pequeno delay para evitar travamento
      timeoutId = setTimeout(() => {
        debugLog('Limpeza de estados executada');
        if (isMountedRef.current) {
          setConfirmacao('');
          setDadosRelacionados(null);
          setErro(null);
          setCarregandoDados(false);
        }
      }, 100);
    }

    // Cleanup
    return () => {
      debugLog('Cleanup useEffect executado');
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      // Cancelar requisi√ß√µes pendentes
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
        abortControllerRef.current = null;
      }
    };
  }, [aberto, cliente?.id]); // ‚Üê SIMPLIFICADO AS DEPEND√äNCIAS

  const handleConfirmar = async () => {
    debugLog('üö® handleConfirmar chamado', { 
      temCliente: !!cliente, 
      confirmacao, 
      confirmacaoCorreta: confirmacao === 'EXCLUIR' 
    });
    
    if (!cliente || confirmacao !== 'EXCLUIR') {
      debugLog('‚ùå Condi√ß√µes n√£o atendidas para confirma√ß√£o');
      return;
    }
    
    debugLog('‚ñ∂Ô∏è Iniciando processo de exclus√£o', { clienteId: cliente.id });
    
    try {
      debugLog('üìû Chamando onConfirmar do pai');
      const sucesso = await onConfirmar(cliente.id);
      
      debugLog('üìû onConfirmar retornou', { sucesso });
      
      // S√≥ fechar se o pai retornar sucesso
      if (sucesso) {
        debugLog('‚úÖ Exclus√£o bem-sucedida, fechando modal');
        onFechar();
      } else {
        debugLog('‚ùå Exclus√£o falhou, mantendo modal aberto');
      }
    } catch (error) {
      debugLog('üí• Erro na confirma√ß√£o', { erro: error });
      // Em caso de erro, deixar o pai decidir se fecha ou n√£o
    }
  };

  const temDados = dadosRelacionados && (
    dadosRelacionados.ambientes > 0 || 
    dadosRelacionados.orcamentos > 0 || 
    dadosRelacionados.materiais > 0
  );

  const podeConfirmar = confirmacao === 'EXCLUIR' && !carregandoDados;

  return (
    <Dialog 
      open={aberto} 
      onOpenChange={(novoEstado) => {
        debugLog('üîÑ Dialog onOpenChange', { 
          estadoAnterior: aberto, 
          novoEstado,
          // Se est√° fechando via ESC ou clique fora
          fechandoViaEvento: !novoEstado && aberto
        });
        
        // S√≥ fechar se realmente est√° mudando para fechado
        if (!novoEstado && aberto) {
          debugLog('üö™ Fechando modal via Dialog');
          onFechar();
        }
      }}
    >
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-red-600">
            <AlertTriangle className="h-5 w-5" />
            Confirmar Exclus√£o
          </DialogTitle>
          <DialogDescription>
            Esta a√ß√£o ir√° excluir permanentemente o cliente e todos os dados relacionados. Esta opera√ß√£o n√£o pode ser desfeita.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* Nome do cliente */}
          <div className="p-3 bg-slate-50 rounded-lg">
            <p className="text-sm text-slate-600">Cliente a ser exclu√≠do:</p>
            <p className="font-semibold text-slate-900">{cliente?.nome}</p>
          </div>

          {/* Loading de dados relacionados */}
          {carregandoDados && (
            <div className="flex items-center justify-center p-4">
              <Loader2 className="h-5 w-5 animate-spin mr-2" />
              <span className="text-sm text-slate-600">Verificando dados relacionados...</span>
            </div>
          )}

          {/* Erro ao carregar dados */}
          {erro && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>{erro}</AlertDescription>
            </Alert>
          )}

          {/* Dados relacionados */}
          {dadosRelacionados && !carregandoDados && (
            <div className="space-y-3">
              {temDados ? (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>ATEN√á√ÉO: Este cliente possui dados importantes!</strong>
                  </AlertDescription>
                </Alert>
              ) : (
                <Alert>
                  <AlertDescription>
                    Este cliente n√£o possui dados relacionados.
                  </AlertDescription>
                </Alert>
              )}

              <div className="grid gap-2">
                <div className="flex items-center justify-between p-2 bg-slate-50 rounded">
                  <div className="flex items-center gap-2">
                    <Home className="h-4 w-4 text-blue-600" />
                    <span className="text-sm">Ambientes</span>
                  </div>
                  <span className={`font-bold ${dadosRelacionados.ambientes > 0 ? 'text-red-600' : 'text-slate-600'}`}>
                    {dadosRelacionados.ambientes}
                  </span>
                </div>

                <div className="flex items-center justify-between p-2 bg-slate-50 rounded">
                  <div className="flex items-center gap-2">
                    <Package className="h-4 w-4 text-orange-600" />
                    <span className="text-sm">Materiais</span>
                  </div>
                  <span className={`font-bold ${dadosRelacionados.materiais > 0 ? 'text-red-600' : 'text-slate-600'}`}>
                    {dadosRelacionados.materiais}
                  </span>
                </div>

                <div className="flex items-center justify-between p-2 bg-slate-50 rounded">
                  <div className="flex items-center gap-2">
                    <Receipt className="h-4 w-4 text-green-600" />
                    <span className="text-sm">Or√ßamentos</span>
                  </div>
                  <span className={`font-bold ${dadosRelacionados.orcamentos > 0 ? 'text-red-600' : 'text-slate-600'}`}>
                    {dadosRelacionados.orcamentos}
                  </span>
                </div>
              </div>

              {temDados && (
                <Alert variant="destructive">
                  <AlertDescription>
                    <strong>Todos esses dados ser√£o perdidos PERMANENTEMENTE!</strong>
                  </AlertDescription>
                </Alert>
              )}
            </div>
          )}

          {/* Campo de confirma√ß√£o */}
          <div className="space-y-2">
            <Label htmlFor="confirmacao">
              Para confirmar a exclus√£o, digite <strong>EXCLUIR</strong>:
            </Label>
            <Input
              id="confirmacao"
              type="text"
              value={confirmacao}
              onChange={(e) => safeSetConfirmacao(e.target.value)}
              placeholder="Digite EXCLUIR"
              className="border-red-300 focus:border-red-500"
              disabled={carregandoDados || isLoading}
            />
          </div>
        </div>

        <DialogFooter className="gap-2">
          <Button 
            variant="outline" 
            onClick={() => {
              debugLog('üö™ Bot√£o Cancelar clicado');
              onFechar();
            }}
            disabled={isLoading}
          >
            Cancelar
          </Button>
          <Button 
            variant="destructive"
            onClick={() => {
              debugLog('üí• Bot√£o Excluir clicado', {
                podeConfirmar,
                isLoading,
                disabled: !podeConfirmar || isLoading
              });
              handleConfirmar();
            }}
            disabled={!podeConfirmar || isLoading}
            className="min-w-[100px]"
          >
            {isLoading ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
                Excluindo...
              </>
            ) : (
              'Excluir Cliente'
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}