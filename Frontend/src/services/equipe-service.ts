/**
 * Servi√ßo de API para Equipe/Funcion√°rios
 * Conecta com o backend FastAPI para opera√ß√µes CRUD de funcion√°rios
 * SEGUE O PADR√ÉO DE empresa-service.ts QUE EST√Å FUNCIONANDO
 */

import { API_CONFIG, logConfig } from '@/lib/config';
import { apiClient } from './api-client';
import type { Funcionario, FuncionarioFormData } from '@/types/sistema';

// Tipos alinhados com backend
export interface FuncionarioBackend {
  id: string;
  nome: string;
  email?: string;
  telefone?: string;
  perfil: 'VENDEDOR' | 'GERENTE' | 'MEDIDOR' | 'ADMIN_MASTER';
  nivel_acesso: 'USUARIO' | 'SUPERVISOR' | 'GERENTE' | 'ADMIN';
  loja_id?: string;
  setor_id?: string;
  salario?: number;
  data_admissao?: string;
  limite_desconto?: number;
  comissao_percentual_vendedor?: number;
  comissao_percentual_gerente?: number;
  tem_minimo_garantido?: boolean;
  valor_minimo_garantido?: number;
  valor_medicao?: number;
  override_comissao?: number;
  ativo: boolean;
  created_at: string;
  updated_at: string;
  
  // Campos relacionados (vindos dos JOINs)
  loja_nome?: string;
  setor_nome?: string;
}

export interface FuncionarioCreatePayload {
  nome: string;
  email?: string;
  telefone?: string;
  perfil: string;
  nivel_acesso: string;
  loja_id?: string;
  setor_id?: string;
  salario?: number;
  data_admissao?: string;
  limite_desconto?: number;
  comissao_percentual_vendedor?: number;
  comissao_percentual_gerente?: number;
  tem_minimo_garantido?: boolean;
  valor_minimo_garantido?: number;
  valor_medicao?: number;
  override_comissao?: number;
}

// Interface removida - convers√£o agora √© feita no api-client

export interface FuncionarioListResponse {
  items: FuncionarioBackend[];
  total: number;
  page: number;
  limit: number;
  pages: number;
}

export interface FuncionarioFiltros {
  busca?: string;
  perfil?: string;
  setor_id?: string;
  data_inicio?: string;
  data_fim?: string;
  page?: number;
  limit?: number;
  signal?: AbortSignal;
}

// Classe de servi√ßo seguindo padr√£o de empresas
class EquipeService {
  constructor() {
    logConfig('EquipeService inicializado com convers√µes centralizadas');
  }

  /**
   * Converte dados do frontend (camelCase) para backend (snake_case)
   * CENTRALIZA TODAS AS CONVERS√ïES AQUI
   */
  private converterParaBackend(dados: FuncionarioFormData): FuncionarioCreatePayload {
    return {
      nome: dados.nome,
      email: dados.email || undefined,
      telefone: dados.telefone || undefined,
      perfil: dados.tipoFuncionario, // tipoFuncionario ‚Üí perfil
      nivel_acesso: dados.nivelAcesso,
      loja_id: dados.lojaId || undefined, // N√£o enviar se vazio
      setor_id: dados.setorId || undefined, // N√£o enviar se vazio
      salario: dados.salario || undefined,
      data_admissao: dados.dataAdmissao || undefined,
      
      // Mapear comiss√£o baseada no tipo
      comissao_percentual_vendedor: dados.tipoFuncionario === 'VENDEDOR' ? dados.comissao : undefined,
      comissao_percentual_gerente: dados.tipoFuncionario === 'GERENTE' ? dados.comissao : undefined,
      
      // Configura√ß√µes especiais
      limite_desconto: dados.configuracoes?.limiteDesconto,
      valor_medicao: dados.configuracoes?.valorMedicao,
      valor_minimo_garantido: dados.configuracoes?.minimoGarantido,
    };
  }

  /**
   * Converte dados do backend (snake_case) para frontend (camelCase)
   * √öNICA CONVERS√ÉO - N√ÉO DUPLICAR NO HOOK!
   */
  private converterParaFrontend(funcionarioBackend: FuncionarioBackend): Funcionario {
    return {
      // IDs e campos b√°sicos
      id: funcionarioBackend.id,
      nome: funcionarioBackend.nome,
      email: funcionarioBackend.email || '',
      telefone: funcionarioBackend.telefone || '',
      
      // Relacionamentos
      setorId: funcionarioBackend.setor_id || '',
      setor: funcionarioBackend.setor_nome || '',
      lojaId: funcionarioBackend.loja_id || '',
      loja: funcionarioBackend.loja_nome || '',
      
      // Campos financeiros
      salario: funcionarioBackend.salario || 0,
      comissao: funcionarioBackend.comissao_percentual_vendedor || 
                funcionarioBackend.comissao_percentual_gerente || 0,
      
      // Campos de trabalho
      dataAdmissao: funcionarioBackend.data_admissao || '',
      ativo: funcionarioBackend.ativo,
      
      // Convers√£o importante: perfil ‚Üí tipoFuncionario
      tipoFuncionario: funcionarioBackend.perfil,
      nivelAcesso: funcionarioBackend.nivel_acesso,
      
      // Campo calculado
      performance: 0,
      
      // Configura√ß√µes especiais
      configuracoes: {
        limiteDesconto: funcionarioBackend.limite_desconto || 0,
        valorMedicao: funcionarioBackend.valor_medicao || 0,
        minimoGarantido: funcionarioBackend.valor_minimo_garantido || 0,
      },
      
      // Timestamps
      createdAt: funcionarioBackend.created_at,
      updatedAt: funcionarioBackend.updated_at,
    };
  }

  /**
   * Lista funcion√°rios com filtros e pagina√ß√£o
   */
  async listar(filtros: FuncionarioFiltros = {}): Promise<{ success: boolean; data?: FuncionarioListResponse; error?: string }> {
    try {
      logConfig('üì° Listando funcion√°rios via API...', { filtros });
      
      // Usar m√©todo do apiClient
      const response = await apiClient.listarFuncionarios(filtros);

      if (response.success && response.data) {
        // Converter cada item do backend para frontend
        const itemsConvertidos = response.data.items.map(item => 
          this.converterParaFrontend(item)
        );

        logConfig('‚úÖ Funcion√°rios carregados e convertidos', { 
          total: response.data.total,
          convertidos: itemsConvertidos.length 
        });

        return {
          success: true,
          data: {
            ...response.data,
            items: itemsConvertidos as any // Cast necess√°rio por causa da convers√£o
          }
        };
      } else {
        throw new Error(response.error || 'Erro ao carregar funcion√°rios');
      }
    } catch (error: any) {
      // Tratamento de erro espec√≠fico
      let mensagemErro = 'Erro ao carregar funcion√°rios';
      
      if (error.message?.includes('403') || error.message?.includes('Not authenticated')) {
        mensagemErro = 'Sess√£o expirada. Fa√ßa login novamente.';
      } else if (error.message?.includes('Failed to fetch')) {
        mensagemErro = 'N√£o foi poss√≠vel conectar ao servidor. Verifique se o backend est√° rodando.';
      } else if (error.message?.includes('timeout')) {
        mensagemErro = 'Servidor demorou muito para responder. Tente novamente.';
      }

      logConfig('‚ùå Erro ao listar funcion√°rios:', error.message);
      return {
        success: false,
        error: mensagemErro
      };
    }
  }

  /**
   * Busca um funcion√°rio espec√≠fico por ID
   */
  async buscarPorId(id: string): Promise<{ success: boolean; data?: Funcionario; error?: string }> {
    try {
      logConfig('üì° Buscando funcion√°rio via API...', { id });
      
      const response = await apiClient.buscarFuncionarioPorId(id);

      if (response.success && response.data) {
        const funcionarioConvertido = this.converterParaFrontend(response.data);
        logConfig('‚úÖ Funcion√°rio encontrado e convertido');
        
        return {
          success: true,
          data: funcionarioConvertido
        };
      } else {
        throw new Error(response.error || 'Funcion√°rio n√£o encontrado');
      }
    } catch (error: any) {
      logConfig('‚ùå Erro ao buscar funcion√°rio:', error.message);
      return {
        success: false,
        error: error.message || 'Erro ao buscar funcion√°rio'
      };
    }
  }

  /**
   * Cria um novo funcion√°rio
   */
  async criar(dados: FuncionarioFormData): Promise<{ success: boolean; data?: Funcionario; error?: string }> {
    try {
      logConfig('üì° Criando funcion√°rio via API...', { nome: dados.nome });
      logConfig('üì¶ Dados originais:', dados);
      
      // N√ÉO converter aqui - apiClient j√° faz a convers√£o
      // Passar direto os dados do formul√°rio
      const response = await apiClient.criarFuncionario(dados);

      if (response.success && response.data) {
        const funcionarioCriado = this.converterParaFrontend(response.data);
        logConfig('‚úÖ Funcion√°rio criado e convertido');
        
        return {
          success: true,
          data: funcionarioCriado
        };
      } else {
        throw new Error(response.error || 'Erro ao criar funcion√°rio');
      }
    } catch (error: any) {
      // Tratamento de erro espec√≠fico
      let mensagemErro = 'Erro ao criar funcion√°rio';
      
      if (error.message?.includes('duplicate') || error.message?.includes('j√° cadastrado')) {
        mensagemErro = 'J√° existe um funcion√°rio com este nome';
      } else if (error.message?.includes('validation')) {
        mensagemErro = 'Verifique os dados informados';
      } else if (error.message?.includes('Failed to fetch')) {
        mensagemErro = 'Erro de conex√£o com o servidor';
      }

      logConfig('‚ùå Erro ao criar funcion√°rio:', error.message);
      return {
        success: false,
        error: mensagemErro
      };
    }
  }

  /**
   * Atualiza um funcion√°rio existente
   */
  async atualizar(id: string, dados: Partial<FuncionarioFormData>): Promise<{ success: boolean; data?: Funcionario; error?: string }> {
    try {
      logConfig('üì° Atualizando funcion√°rio via API...', { id });
      
      // N√ÉO converter aqui - apiClient j√° faz a convers√£o
      // Passar direto os dados parciais
      const response = await apiClient.atualizarFuncionario(id, dados);

      if (response.success && response.data) {
        const funcionarioAtualizado = this.converterParaFrontend(response.data);
        logConfig('‚úÖ Funcion√°rio atualizado e convertido');
        
        return {
          success: true,
          data: funcionarioAtualizado
        };
      } else {
        throw new Error(response.error || 'Erro ao atualizar funcion√°rio');
      }
    } catch (error: any) {
      logConfig('‚ùå Erro ao atualizar funcion√°rio:', error.message);
      return {
        success: false,
        error: error.message || 'Erro ao atualizar funcion√°rio'
      };
    }
  }

  /**
   * Alterna status ativo/inativo
   */
  async alternarStatus(id: string): Promise<{ success: boolean; data?: Funcionario; error?: string }> {
    try {
      logConfig('üì° Alternando status do funcion√°rio...', { id });
      
      // Buscar funcion√°rio atual para saber o status
      const funcionarioAtual = await this.buscarPorId(id);
      if (!funcionarioAtual.success || !funcionarioAtual.data) {
        throw new Error('Funcion√°rio n√£o encontrado');
      }
      
      // Atualizar apenas o campo ativo
      const payload = { ativo: !funcionarioAtual.data.ativo };
      
      const response = await apiClient.atualizarFuncionario(id, payload);

      if (response.success && response.data) {
        const funcionarioAtualizado = this.converterParaFrontend(response.data);
        logConfig('‚úÖ Status alterado com sucesso');
        
        return {
          success: true,
          data: funcionarioAtualizado
        };
      } else {
        throw new Error(response.error || 'Erro ao alterar status');
      }
    } catch (error: any) {
      logConfig('‚ùå Erro ao alterar status:', error.message);
      return {
        success: false,
        error: error.message || 'Erro ao alterar status'
      };
    }
  }

  /**
   * Exclui um funcion√°rio (soft delete)
   */
  async excluir(id: string): Promise<{ success: boolean; error?: string }> {
    try {
      logConfig('üì° Excluindo funcion√°rio via API...', { id });
      
      const response = await apiClient.excluirFuncionario(id);

      if (response.success) {
        logConfig('‚úÖ Funcion√°rio exclu√≠do via API');
        return {
          success: true
        };
      } else {
        throw new Error(response.error || 'Erro ao excluir funcion√°rio');
      }
    } catch (error: any) {
      logConfig('‚ùå Erro ao excluir funcion√°rio:', error.message);
      return {
        success: false,
        error: error.message || 'Erro ao excluir funcion√°rio'
      };
    }
  }

  /**
   * Verifica se um nome est√° dispon√≠vel
   */
  async verificarNome(nome: string, funcionarioId?: string): Promise<{ success: boolean; data?: { disponivel: boolean; nome: string }; error?: string }> {
    try {
      const response = await apiClient.verificarNomeFuncionario(nome, funcionarioId);

      if (response.success && response.data) {
        return {
          success: true,
          data: response.data
        };
      } else {
        throw new Error(response.error || 'Erro ao verificar nome');
      }
    } catch (error: any) {
      logConfig('‚ùå Erro ao verificar nome:', error.message);
      return {
        success: false,
        error: error.message || 'Erro ao verificar nome'
      };
    }
  }

  /**
   * Teste de conectividade (endpoint p√∫blico)
   */
  async testePublico(): Promise<{ success: boolean; data?: any; error?: string }> {
    try {
      const response = await apiClient.testePublicoEquipe();

      if (response.success) {
        return {
          success: true,
          data: response.data
        };
      } else {
        throw new Error(response.error || 'Erro no teste de conectividade');
      }
    } catch (error: any) {
      logConfig('‚ùå Erro no teste p√∫blico:', error.message);
      return {
        success: false,
        error: error.message || 'Erro no teste de conectividade'
      };
    }
  }
}

// Inst√¢ncia singleton
export const equipeService = new EquipeService();

// Log de inicializa√ß√£o
logConfig('üöÄ EquipeService carregado com convers√µes centralizadas');