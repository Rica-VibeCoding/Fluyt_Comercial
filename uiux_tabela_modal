# üìã Guia de Refatora√ß√£o: Tabelas Frontend + Supabase + UX/UI

## üéØ **OBJETIVO**
Este documento orienta desenvolvedores na refatora√ß√£o de tabelas no frontend seguindo os padr√µes estabelecidos de UX/UI, integra√ß√£o com Supabase e estrutura modular.

---

## üèóÔ∏è **ARQUITETURA GERAL**

### **Stack Tecnol√≥gico**
- **Frontend:** Next.js 14 + TypeScript + Tailwind CSS
- **Backend:** FastAPI + Python
- **Database:** Supabase (PostgreSQL)
- **UI Components:** shadcn/ui + Lucide Icons

### **Estrutura de Pastas**
```
Frontend/src/
‚îú‚îÄ‚îÄ components/modulos/sistema/
‚îÇ   ‚îú‚îÄ‚îÄ [modulo]/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [modulo]-table.tsx     # Tabela principal
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [modulo]-form.tsx      # Modal de formul√°rio
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts               # Exports
‚îú‚îÄ‚îÄ hooks/modulos/sistema/
‚îÇ   ‚îî‚îÄ‚îÄ use-[modulo].ts            # Hook de estado e API
‚îú‚îÄ‚îÄ types/sistema.ts               # Interfaces TypeScript
‚îî‚îÄ‚îÄ services/api-client.ts         # Cliente HTTP
```

---

## üé® **PADR√ÉO UX/UI ESTABELECIDO**

### **üìä Estrutura da Tabela**

#### **Cabe√ßalho (TableHeader)**
```typescript
<TableHeader>
  <TableRow className="bg-slate-50 border-b border-slate-200">
    <TableHead className="w-12"></TableHead>           // Expand icon
    <TableHead>C√≥digo</TableHead>                      // #001, #002...
    <TableHead>[Campo Principal]</TableHead>           // Nome/T√≠tulo
    <TableHead>[Campo Secund√°rio]</TableHead>          // Categoria/Tipo
    <TableHead>[Campo Terci√°rio]</TableHead>           // Valor/Status
    <TableHead>Status</TableHead>                      // Switch + Badge
    <TableHead className="text-right">A√ß√µes</TableHead> // Edit/Delete
  </TableRow>
</TableHeader>
```

#### **Linha Principal (Compacta)**
- **Expand Icon:** ChevronRight/ChevronDown (h-4 w-4)
- **C√≥digo:** Sequencial #001, #002... (font-mono)
- **Dados:** Apenas essenciais, texto small (text-sm)
- **A√ß√µes:** √çcones ghost (h-3 w-3) com hover

#### **Linha Expandida (Detalhada)**
- **Layout:** Grid 3 colunas (lg:grid-cols-3)
- **Espa√ßamento:** gap-3, space-y-2
- **T√≠tulos:** text-xs, uppercase, tracking-wide
- **√çcones:** h-3 w-3 com cores contextuais
- **Placeholders:** "--" em vez de "N√£o informado"

### **üé® Classes CSS Padr√£o**

```css
/* Tabela */
.table-container: "rounded-lg border-0 bg-blue-50/30 shadow-md"
.table-row: "h-12 bg-white hover:bg-blue-50/50 cursor-pointer transition-colors"
.table-row-expanded: "bg-blue-50/20 hover:bg-blue-50/30"

/* Textos */
.title-section: "text-xs font-semibold text-slate-700 mb-2 uppercase tracking-wide"
.label: "text-xs font-medium text-slate-600 min-w-[45px]"
.value: "text-xs text-slate-900"
.placeholder: "text-xs text-gray-400"

/* √çcones */
.icon-small: "h-3 w-3"
.icon-expand: "h-4 w-4 text-slate-500"
.icon-action: "h-3 w-3 text-slate-500"
```

---

## üîß **TEMPLATE DE IMPLEMENTA√á√ÉO**

### **1. Interface TypeScript**

```typescript
// types/sistema.ts
export interface [Entidade] extends BaseEntity {
  // Campos obrigat√≥rios
  nome: string;
  
  // Campos opcionais (sempre com ?)
  email?: string;
  telefone?: string;
  ativo: boolean;
}

export interface [Entidade]FormData {
  // Apenas campos edit√°veis
  nome: string;
  email?: string;
  telefone?: string;
}
```

### **2. Hook de Estado**

```typescript
// hooks/modulos/sistema/use-[entidade].ts
export function use[Entidade]() {
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  
  const toggleRowExpansion = (id: string) => {
    const newExpandedRows = new Set(expandedRows);
    if (newExpandedRows.has(id)) {
      newExpandedRows.delete(id);
    } else {
      newExpandedRows.add(id);
    }
    setExpandedRows(newExpandedRows);
  };

  const get[Entidade]Numero = (index: number) => {
    return String(index + 1).padStart(3, '0');
  };

  // CRUD operations...
  
  return {
    expandedRows,
    toggleRowExpansion,
    get[Entidade]Numero,
    // ... outros m√©todos
  };
}
```

### **3. Componente Tabela**

```typescript
// components/modulos/sistema/[entidade]/[entidade]-table.tsx
export function [Entidade]Table({ 
  [entidades], 
  onEdit, 
  onDelete, 
  onToggleStatus,
  loading = false 
}: [Entidade]TableProps) {
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());

  // ... fun√ß√µes auxiliares

  return (
    <div className="rounded-lg border-0 bg-blue-50/30 shadow-md">
      <Table>
        <TableHeader>
          {/* Cabe√ßalho padr√£o */}
        </TableHeader>
        <TableBody>
          {[entidades].map(([entidade], index) => (
            <React.Fragment key={[entidade].id}>
              {/* Linha principal */}
              <TableRow 
                className="h-12 bg-white hover:bg-blue-50/50 cursor-pointer transition-colors"
                onClick={() => toggleRowExpansion([entidade].id)}
              >
                {/* C√©lulas compactas */}
              </TableRow>

              {/* Linha expandida */}
              {expandedRows.has([entidade].id) && (
                <TableRow className="bg-blue-50/20 hover:bg-blue-50/30">
                  <TableCell colSpan={[numero_colunas]} className="py-4">
                    <div className="pl-4">
                      <div className="grid grid-cols-1 lg:grid-cols-3 gap-3">
                        {/* 3 colunas organizadas */}
                      </div>
                    </div>
                  </TableCell>
                </TableRow>
              )}
            </React.Fragment>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
```

---

## üîå **INTEGRA√á√ÉO SUPABASE**

### **Backend (FastAPI)**

#### **Estrutura M√≥dulo**
```
backend/modules/[entidade]/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ controller.py      # Endpoints REST
‚îú‚îÄ‚îÄ repository.py      # Queries Supabase
‚îú‚îÄ‚îÄ schemas.py         # Pydantic models
‚îî‚îÄ‚îÄ services.py        # L√≥gica de neg√≥cio
```

#### **Controller Padr√£o**
```python
# controller.py
@router.get("/", response_model=List[EntidadeResponse])
async def listar_entidades():
    return await entidade_service.listar_todas()

@router.post("/", response_model=EntidadeResponse)
async def criar_entidade(dados: EntidadeCreate):
    return await entidade_service.criar(dados)

@router.put("/{entidade_id}")
async def atualizar_entidade(entidade_id: str, dados: EntidadeUpdate):
    return await entidade_service.atualizar(entidade_id, dados)

@router.delete("/{entidade_id}")
async def deletar_entidade(entidade_id: str):
    return await entidade_service.deletar(entidade_id)
```

#### **Repository Padr√£o**
```python
# repository.py
class EntidadeRepository:
    @staticmethod
    async def listar_todas():
        response = supabase.table("cad_entidades").select("*").execute()
        return response.data
    
    @staticmethod
    async def criar(dados: dict):
        response = supabase.table("cad_entidades").insert(dados).execute()
        return response.data[0]
    
    @staticmethod
    async def atualizar(id: str, dados: dict):
        response = supabase.table("cad_entidades").update(dados).eq("id", id).execute()
        return response.data[0]
    
    @staticmethod
    async def deletar(id: str):
        supabase.table("cad_entidades").delete().eq("id", id).execute()
        return True
```

### **Frontend (API Client)**

```typescript
// services/api-client.ts
export const [entidade]Api = {
  async listar(): Promise<[Entidade][]> {
    const response = await fetch(`${API_URL}/[entidades]`);
    return response.json();
  },

  async criar(dados: [Entidade]FormData): Promise<[Entidade]> {
    const response = await fetch(`${API_URL}/[entidades]`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(dados),
    });
    return response.json();
  },

  async atualizar(id: string, dados: [Entidade]FormData): Promise<[Entidade]> {
    const response = await fetch(`${API_URL}/[entidades]/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(dados),
    });
    return response.json();
  },

  async deletar(id: string): Promise<void> {
    await fetch(`${API_URL}/[entidades]/${id}`, {
      method: 'DELETE',
    });
  },
};
```

---

## üìä **PADR√ïES DE SCHEMA SUPABASE**

### **Tabela Padr√£o**
```sql
CREATE TABLE cad_[entidades] (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  nome VARCHAR NOT NULL,
  email VARCHAR,
  telefone VARCHAR,
  ativo BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Trigger para updated_at
CREATE TRIGGER update_[entidades]_updated_at 
  BEFORE UPDATE ON cad_[entidades] 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
```

### **RLS (Row Level Security)**
```sql
-- Habilitar RLS
ALTER TABLE cad_[entidades] ENABLE ROW LEVEL SECURITY;

-- Policy para SELECT
CREATE POLICY "Usu√°rios podem ver [entidades]" ON cad_[entidades]
  FOR SELECT USING (auth.role() = 'authenticated');

-- Policy para INSERT/UPDATE/DELETE
CREATE POLICY "Usu√°rios podem gerenciar [entidades]" ON cad_[entidades]
  FOR ALL USING (auth.role() = 'authenticated');
```

---

## üéØ **CHECKLIST DE REFATORA√á√ÉO**

### **‚úÖ Prepara√ß√£o**
- [ ] Verificar se tabela existe no Supabase
- [ ] Conferir schema com campos obrigat√≥rios/opcionais
- [ ] Validar se backend tem endpoints CRUD
- [ ] Verificar se tipos TypeScript est√£o corretos

### **‚úÖ Implementa√ß√£o**
- [ ] Criar hook com estado de expans√£o
- [ ] Implementar fun√ß√£o de numera√ß√£o sequencial
- [ ] Adicionar imports de √≠cones necess√°rios
- [ ] Estruturar cabe√ßalho da tabela (6-7 colunas)
- [ ] Implementar linha principal compacta
- [ ] Criar linha expandida com 3 colunas organizadas
- [ ] Aplicar classes CSS padr√£o
- [ ] Configurar placeholders sutis (--)
- [ ] Testar responsividade (lg:grid-cols-3)

### **‚úÖ Valida√ß√£o**
- [ ] Testar expans√£o/contra√ß√£o de linhas
- [ ] Verificar se a√ß√µes n√£o expandem linha (stopPropagation)
- [ ] Validar placeholders para campos vazios
- [ ] Conferir responsividade em mobile
- [ ] Testar CRUD completo
- [ ] Verificar performance com muitos registros

---

## üö® **PROBLEMAS COMUNS E SOLU√á√ïES**

### **Problema: Campos undefined quebrando a UI**
```typescript
// ‚ùå Errado
<span>{entidade.campo}</span>

// ‚úÖ Correto
<span>{entidade.campo || '--'}</span>
// ou
{entidade.campo ? (
  <span>{entidade.campo}</span>
) : (
  <span className="text-xs text-gray-400">--</span>
)}
```

### **Problema: A√ß√µes expandindo linha**
```typescript
// ‚úÖ Sempre adicionar stopPropagation nas a√ß√µes
<TableCell onClick={(e) => e.stopPropagation()}>
  <Button onClick={() => onEdit(item)}>
    <Edit className="h-3 w-3" />
  </Button>
</TableCell>
```

### **Problema: ColSpan incorreto**
```typescript
// ‚úÖ Contar todas as colunas incluindo expand e c√≥digo
<TableCell colSpan={7} className="py-4">
//              ‚Üë Total de colunas da tabela
```

### **Problema: Performance com muitos registros**
```typescript
// ‚úÖ Usar React.Fragment para evitar DOM extra
{items.map((item, index) => (
  <React.Fragment key={item.id}>
    {/* Linhas da tabela */}
  </React.Fragment>
))}
```

---

## üìö **RECURSOS ADICIONAIS**

### **√çcones Lucide Recomendados**
- **Dados:** Building2, Users, Mail, Phone, MapPin
- **Valores:** DollarSign, Percent, TrendingUp
- **A√ß√µes:** Edit, Trash2, ChevronDown, ChevronRight
- **Categorias:** Tag, Store, Settings, Hash
- **Status:** Shield, Star, Target

### **Cores Contextuais**
```typescript
const colors = {
  primary: 'text-blue-500',
  success: 'text-green-500', 
  warning: 'text-yellow-500',
  danger: 'text-red-500',
  info: 'text-purple-500',
  neutral: 'text-slate-500'
};
```

### **Breakpoints Tailwind**
- `lg:grid-cols-3` - 3 colunas em desktop
- `gap-3` - Espa√ßamento padr√£o
- `space-y-2` - Espa√ßamento vertical
- `min-w-[45px]` - Largura m√≠nima de labels

---

## üéì **EXEMPLO COMPLETO**

Consulte as tabelas j√° refatoradas como refer√™ncia:
- **Simples:** `lojas/loja-table.tsx`
- **M√©dia:** `montadores/montador-table.tsx` 
- **Complexa:** `equipe/funcionario-table.tsx`

---

**üìù Nota:** Este padr√£o foi estabelecido ap√≥s refatora√ß√£o de 7 tabelas e deve ser seguido para manter consist√™ncia visual e funcional em todo o sistema.
