#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Script para iniciar o backend Fluyt Comercial de forma segura
.DESCRIPTION
    Este script verifica e finaliza processos anteriores na porta 8000,
    ativa o ambiente virtual Python e inicia o servidor FastAPI com configura√ß√µes otimizadas.
.NOTES
    Autor: Fluyt Team
    Vers√£o: 2.0
    Data: 2025-01-20
#>

param(
    [switch]$Force,
    [switch]$Debug,
    [int]$Port = 8000
)

# Configura√ß√µes
$BackendDir = "backend"
$VenvPath = "$BackendDir\venv"
$MainScript = "$BackendDir\main.py"
$RequirementsFile = "$BackendDir\requirements.txt"

# Cores para output
$Red = [System.ConsoleColor]::Red
$Green = [System.ConsoleColor]::Green
$Yellow = [System.ConsoleColor]::Yellow
$Blue = [System.ConsoleColor]::Blue

function Write-ColorOutput {
    param([string]$Message, [System.ConsoleColor]$Color = [System.ConsoleColor]::White)
    Write-Host $Message -ForegroundColor $Color
}

function Test-Port {
    param([int]$Port)
    try {
        $connection = Test-NetConnection -ComputerName localhost -Port $Port -WarningAction SilentlyContinue
        return $connection.TcpTestSucceeded
    }
    catch {
        return $false
    }
}

function Stop-ProcessOnPort {
    param([int]$Port)
    
    Write-ColorOutput "üîç Verificando processos na porta $Port..." $Yellow
    
    # M√©todo 1: netstat + taskkill
    try {
        $netstatOutput = netstat -ano | Select-String ":$Port "
        if ($netstatOutput) {
            foreach ($line in $netstatOutput) {
                if ($line -match '\s+(\d+)$') {
                    $pid = $matches[1]
                    Write-ColorOutput "üìã Finalizando processo PID: $pid" $Yellow
                    try {
                        Stop-Process -Id $pid -Force -ErrorAction Stop
                        Write-ColorOutput "‚úÖ Processo $pid finalizado" $Green
                    }
                    catch {
                        Write-ColorOutput "‚ö†Ô∏è  Erro ao finalizar processo $pid: $($_.Exception.Message)" $Red
                    }
                }
            }
        }
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è  Erro no netstat: $($_.Exception.Message)" $Red
    }
    
    # M√©todo 2: PowerShell Get-Process
    try {
        $pythonProcesses = Get-Process | Where-Object { 
            $_.ProcessName -like "*python*" -or 
            $_.ProcessName -like "*uvicorn*" -or
            $_.ProcessName -like "*fastapi*"
        }
        
        foreach ($process in $pythonProcesses) {
            try {
                # Verificar se o processo est√° usando a porta
                $connections = Get-NetTCPConnection -OwningProcess $process.Id -ErrorAction SilentlyContinue | Where-Object { $_.LocalPort -eq $Port }
                if ($connections) {
                    Write-ColorOutput "üìã Finalizando processo Python PID: $($process.Id)" $Yellow
                    Stop-Process -Id $process.Id -Force
                    Write-ColorOutput "‚úÖ Processo Python $($process.Id) finalizado" $Green
                }
            }
            catch {
                # Ignorar erros de acesso
            }
        }
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è  Erro ao verificar processos Python: $($_.Exception.Message)" $Red
    }
    
    # Aguardar libera√ß√£o da porta
    $maxWait = 10
    $waited = 0
    while ((Test-Port -Port $Port) -and ($waited -lt $maxWait)) {
        Write-ColorOutput "‚è≥ Aguardando libera√ß√£o da porta $Port... ($waited/$maxWait)" $Yellow
        Start-Sleep -Seconds 1
        $waited++
    }
    
    if (Test-Port -Port $Port) {
        Write-ColorOutput "‚ùå Porta $Port ainda est√° ocupada ap√≥s $maxWait segundos" $Red
        if (-not $Force) {
            Write-ColorOutput "üí° Use -Force para tentar iniciar mesmo assim" $Yellow
            return $false
        }
    } else {
        Write-ColorOutput "‚úÖ Porta $Port liberada" $Green
    }
    
    return $true
}

function Test-PythonEnvironment {
    Write-ColorOutput "üêç Verificando ambiente Python..." $Blue
    
    # Verificar se o diret√≥rio backend existe
    if (-not (Test-Path $BackendDir)) {
        Write-ColorOutput "‚ùå Diret√≥rio backend n√£o encontrado" $Red
        return $false
    }
    
    # Verificar arquivo principal
    if (-not (Test-Path $MainScript)) {
        Write-ColorOutput "‚ùå Arquivo main.py n√£o encontrado em $MainScript" $Red
        return $false
    }
    
    # Verificar venv
    if (-not (Test-Path $VenvPath)) {
        Write-ColorOutput "‚ö†Ô∏è  Ambiente virtual n√£o encontrado em $VenvPath" $Yellow
        Write-ColorOutput "üí° Criando ambiente virtual..." $Blue
        
        try {
            Set-Location $BackendDir
            python -m venv venv
            Write-ColorOutput "‚úÖ Ambiente virtual criado" $Green
        }
        catch {
            Write-ColorOutput "‚ùå Erro ao criar ambiente virtual: $($_.Exception.Message)" $Red
            return $false
        }
        finally {
            Set-Location ..
        }
    }
    
    return $true
}

function Install-Dependencies {
    Write-ColorOutput "üì¶ Verificando depend√™ncias..." $Blue
    
    try {
        Set-Location $BackendDir
        
        # Ativar venv
        if ($IsWindows -or $env:OS -eq "Windows_NT") {
            & ".\venv\Scripts\Activate.ps1"
        } else {
            & "source ./venv/bin/activate"
        }
        
        # Verificar se requirements.txt existe
        if (Test-Path $RequirementsFile) {
            Write-ColorOutput "üìã Instalando depend√™ncias do requirements.txt..." $Blue
            pip install -r requirements.txt --quiet
            Write-ColorOutput "‚úÖ Depend√™ncias instaladas" $Green
        } else {
            Write-ColorOutput "‚ö†Ô∏è  Arquivo requirements.txt n√£o encontrado" $Yellow
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao instalar depend√™ncias: $($_.Exception.Message)" $Red
        return $false
    }
    finally {
        Set-Location ..
    }
    
    return $true
}

function Start-Backend {
    Write-ColorOutput "üöÄ Iniciando backend Fluyt Comercial..." $Green
    
    try {
        Set-Location $BackendDir
        
        # Configurar vari√°veis de ambiente
        $env:PYTHONPATH = (Get-Location).Path
        $env:PYTHONUNBUFFERED = "1"
        
        # Verificar arquivo .env
        if (Test-Path ".env") {
            Write-ColorOutput "‚úÖ Arquivo .env encontrado" $Green
        } else {
            Write-ColorOutput "‚ö†Ô∏è  Arquivo .env n√£o encontrado - algumas funcionalidades podem n√£o funcionar" $Yellow
        }
        
        Write-ColorOutput "=" * 60 $Blue
        Write-ColorOutput "üåê Backend rodando em: http://localhost:$Port" $Green
        Write-ColorOutput "üìö Documenta√ß√£o: http://localhost:$Port/docs" $Green
        Write-ColorOutput "üîß Redoc: http://localhost:$Port/redoc" $Green
        Write-ColorOutput "‚ù§Ô∏è  Health Check: http://localhost:$Port/health" $Green
        Write-ColorOutput "=" * 60 $Blue
        Write-ColorOutput "üí° Pressione Ctrl+C para parar o servidor" $Yellow
        Write-ColorOutput "=" * 60 $Blue
        
        # Ativar ambiente virtual e iniciar servidor
        if ($IsWindows -or $env:OS -eq "Windows_NT") {
            & ".\venv\Scripts\python.exe" -m uvicorn main:app --host 0.0.0.0 --port $Port --reload $(if ($Debug) { "--log-level debug" } else { "--log-level info" })
        } else {
            & "./venv/bin/python" -m uvicorn main:app --host 0.0.0.0 --port $Port --reload $(if ($Debug) { "--log-level debug" } else { "--log-level info" })
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao iniciar backend: $($_.Exception.Message)" $Red
        return $false
    }
    finally {
        Set-Location ..
    }
    
    return $true
}

# Execu√ß√£o principal
Write-ColorOutput "üéØ Fluyt Comercial - Inicializador de Backend v2.0" $Blue
Write-ColorOutput "=" * 60 $Blue

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "backend") -and -not (Test-Path "Frontend")) {
    Write-ColorOutput "‚ùå Execute este script na raiz do projeto Fluyt_Comercial" $Red
    exit 1
}

# Parar processos na porta
if (-not (Stop-ProcessOnPort -Port $Port)) {
    Write-ColorOutput "‚ùå N√£o foi poss√≠vel liberar a porta $Port" $Red
    exit 1
}

# Verificar ambiente Python
if (-not (Test-PythonEnvironment)) {
    Write-ColorOutput "‚ùå Ambiente Python n√£o est√° configurado corretamente" $Red
    exit 1
}

# Instalar depend√™ncias
if (-not (Install-Dependencies)) {
    Write-ColorOutput "‚ùå Erro ao configurar depend√™ncias" $Red
    exit 1
}

# Iniciar backend
if (-not (Start-Backend)) {
    Write-ColorOutput "‚ùå Erro ao iniciar backend" $Red
    exit 1
}

Write-ColorOutput "‚úÖ Backend finalizado com sucesso" $Green 