#!/usr/bin/env python3
"""
Teste CRUD Completo - Equipe
Identifica problemas espec√≠ficos em cada opera√ß√£o
"""
import requests
import json
import time
from datetime import datetime

# Configura√ß√µes
API_URL = "http://localhost:8000/api/v1"
LOGIN_DATA = {
    "email": "ricardo.nilton@hotmail.com",
    "password": "123456"
}

class TesteCRUDEquipe:
    def __init__(self):
        self.token = None
        self.funcionario_teste_id = None
        
    def fazer_login(self):
        """Faz login e obt√©m token"""
        print("üîê Fazendo login...")
        
        try:
            response = requests.post(f"{API_URL}/auth/login", json=LOGIN_DATA, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get('access_token')
                print(f"   ‚úÖ Login OK! Usu√°rio: {data.get('user', {}).get('nome', 'N/A')}")
                return True
            else:
                print(f"   ‚ùå Erro login: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erro login: {str(e)}")
            return False
    
    def get_headers(self):
        """Retorna headers com token"""
        return {"Authorization": f"Bearer {self.token}"}
    
    def teste_1_listar_funcionarios(self):
        """Teste 1: Listar funcion√°rios existentes"""
        print("\n1Ô∏è‚É£ TESTE: Listar funcion√°rios")
        print("-" * 40)
        
        try:
            response = requests.get(f"{API_URL}/equipe/", headers=self.get_headers(), timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Listagem OK!")
                print(f"   üìä Total: {data.get('total', 0)} funcion√°rios")
                
                # Mostrar alguns funcion√°rios
                items = data.get('items', [])
                for i, func in enumerate(items[:3]):
                    print(f"   - {func.get('nome')} ({func.get('perfil')}) - {func.get('email')}")
                
                return True, data
            else:
                print(f"   ‚ùå Erro listagem: {response.status_code}")
                print(f"   üìÑ Response: {response.text}")
                return False, None
                
        except Exception as e:
            print(f"   ‚ùå Erro listagem: {str(e)}")
            return False, None
    
    def teste_2_criar_funcionario(self):
        """Teste 2: Criar novo funcion√°rio"""
        print("\n2Ô∏è‚É£ TESTE: Criar funcion√°rio")
        print("-" * 40)
        
        # Dados do novo funcion√°rio - testando diferentes formatos
        funcionarios_teste = [
            {
                "nome": f"Teste CRUD {datetime.now().strftime('%H%M%S')}",
                "email": f"teste.crud.{datetime.now().strftime('%H%M%S')}@fluyt.com",
                "telefone": "11999999999",
                "perfil": "VENDEDOR",
                "nivel_acesso": "USUARIO",
                "loja_id": "317c3115-e071-40a6-9bc5-7c3227e0d82c",
                "salario": 3000.00,
                "data_admissao": "2025-01-15",
                "ativo": True
            },
            {
                "nome": f"Teste M√≠nimo {datetime.now().strftime('%H%M%S')}",
                "email": f"teste.min.{datetime.now().strftime('%H%M%S')}@fluyt.com"
            }
        ]
        
        for i, dados in enumerate(funcionarios_teste, 1):
            print(f"\n   üß™ Teste {i}: {dados['nome']}")
            print(f"   üì¶ Payload: {json.dumps(dados, indent=2)}")
            
            try:
                response = requests.post(
                    f"{API_URL}/equipe/", 
                    headers=self.get_headers(), 
                    json=dados,
                    timeout=15
                )
                
                print(f"   üì° Status: {response.status_code}")
                print(f"   üìÑ Response: {response.text[:200]}...")
                
                if response.status_code == 201:
                    data = response.json()
                    funcionario_id = data.get('id')
                    print(f"   ‚úÖ Cria√ß√£o OK! ID: {funcionario_id}")
                    
                    # Guardar o primeiro ID para testes posteriores
                    if not self.funcionario_teste_id:
                        self.funcionario_teste_id = funcionario_id
                    
                    return True, funcionario_id
                else:
                    print(f"   ‚ùå Erro cria√ß√£o: {response.status_code}")
                    
                    # Tentar extrair erro espec√≠fico
                    try:
                        error_data = response.json()
                        print(f"   üîç Erro espec√≠fico: {error_data.get('message', 'N/A')}")
                        print(f"   üîç Tipo erro: {error_data.get('error', 'N/A')}")
                    except:
                        pass
                        
            except Exception as e:
                print(f"   ‚ùå Erro cria√ß√£o: {str(e)}")
        
        return False, None
    
    def teste_3_buscar_funcionario(self, funcionario_id):
        """Teste 3: Buscar funcion√°rio espec√≠fico"""
        print(f"\n3Ô∏è‚É£ TESTE: Buscar funcion√°rio {funcionario_id}")
        print("-" * 40)
        
        try:
            response = requests.get(
                f"{API_URL}/equipe/{funcionario_id}", 
                headers=self.get_headers(), 
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Busca OK!")
                print(f"   üë§ Nome: {data.get('nome')}")
                print(f"   üìß Email: {data.get('email')}")
                print(f"   üè¢ Loja: {data.get('loja_nome', 'N/A')}")
                return True, data
            else:
                print(f"   ‚ùå Erro busca: {response.status_code}")
                print(f"   üìÑ Response: {response.text}")
                return False, None
                
        except Exception as e:
            print(f"   ‚ùå Erro busca: {str(e)}")
            return False, None
    
    def teste_4_atualizar_funcionario(self, funcionario_id):
        """Teste 4: Atualizar funcion√°rio"""
        print(f"\n4Ô∏è‚É£ TESTE: Atualizar funcion√°rio {funcionario_id}")
        print("-" * 40)
        
        dados_atualizacao = {
            "telefone": "11888888888",
            "salario": 3500.00,
            "perfil": "GERENTE"
        }
        
        print(f"   üì¶ Dados: {json.dumps(dados_atualizacao, indent=2)}")
        
        try:
            response = requests.put(
                f"{API_URL}/equipe/{funcionario_id}", 
                headers=self.get_headers(), 
                json=dados_atualizacao,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Atualiza√ß√£o OK!")
                print(f"   üìû Novo telefone: {data.get('telefone')}")
                print(f"   üí∞ Novo sal√°rio: {data.get('salario')}")
                return True, data
            else:
                print(f"   ‚ùå Erro atualiza√ß√£o: {response.status_code}")
                print(f"   üìÑ Response: {response.text}")
                return False, None
                
        except Exception as e:
            print(f"   ‚ùå Erro atualiza√ß√£o: {str(e)}")
            return False, None
    
    def teste_5_excluir_funcionario(self, funcionario_id):
        """Teste 5: Excluir funcion√°rio"""
        print(f"\n5Ô∏è‚É£ TESTE: Excluir funcion√°rio {funcionario_id}")
        print("-" * 40)
        
        try:
            response = requests.delete(
                f"{API_URL}/equipe/{funcionario_id}", 
                headers=self.get_headers(), 
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ Exclus√£o OK!")
                return True
            else:
                print(f"   ‚ùå Erro exclus√£o: {response.status_code}")
                print(f"   üìÑ Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erro exclus√£o: {str(e)}")
            return False
    
    def executar_todos_testes(self):
        """Executa todos os testes em sequ√™ncia"""
        print("üöÄ INICIANDO TESTE CRUD COMPLETO - EQUIPE")
        print("=" * 50)
        
        # Login
        if not self.fazer_login():
            print("‚ùå Falha no login. Encerrando testes.")
            return
        
        # Teste 1: Listar
        sucesso_listar, dados_lista = self.teste_1_listar_funcionarios()
        
        # Teste 2: Criar
        sucesso_criar, funcionario_id = self.teste_2_criar_funcionario()
        
        if sucesso_criar and funcionario_id:
            # Teste 3: Buscar
            sucesso_buscar, dados_funcionario = self.teste_3_buscar_funcionario(funcionario_id)
            
            # Teste 4: Atualizar
            sucesso_atualizar, dados_atualizados = self.teste_4_atualizar_funcionario(funcionario_id)
            
            # Teste 5: Excluir
            sucesso_excluir = self.teste_5_excluir_funcionario(funcionario_id)
        
        # Relat√≥rio final
        print("\n" + "=" * 50)
        print("üìä RELAT√ìRIO FINAL")
        print("=" * 50)
        print(f"‚úÖ Login: {'OK' if self.token else 'FALHOU'}")
        print(f"‚úÖ Listar: {'OK' if sucesso_listar else 'FALHOU'}")
        print(f"‚úÖ Criar: {'OK' if sucesso_criar else 'FALHOU'}")
        
        if sucesso_criar:
            print(f"‚úÖ Buscar: {'OK' if sucesso_buscar else 'FALHOU'}")
            print(f"‚úÖ Atualizar: {'OK' if sucesso_atualizar else 'FALHOU'}")
            print(f"‚úÖ Excluir: {'OK' if sucesso_excluir else 'FALHOU'}")

if __name__ == "__main__":
    teste = TesteCRUDEquipe()
    teste.executar_todos_testes() 